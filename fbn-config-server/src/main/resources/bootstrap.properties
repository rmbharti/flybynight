spring.application.name=fbn-config-server
server.port=9000

info.app.name=Fbn Config Service
info.app.description=Config Service
info.app.version=1.0

logging.level.root=info
logging.level.org.apache.catalina=info
logging.level.org.springframework=info


# Public repo works fine
#spring.cloud.config.profiles=native 
#spring.cloud.config.server.git.uri=https://github.com/rmbharti/fbn-config-repo

# now configuring private repo 
spring.cloud.config.server.git.uri=https://github.com/rmbharti/fbn-config-repo
spring.cloud.config.server.monitor.github.enabled=true 

# To activate web hook
# java -Dsecurity.user.name=config \
#     -Dsecurity.user.password=verysecure \
#     -Dspring.cloud.config.server.monitor.github.enabled=true \
#     -Dspring.cloud.config.server.git.uri=https://github.com/altfatterz/spring-cloud-config-example-repo \
#     -Dencrypt.key=foobarbaz \
#     -jar config-service/target/config-service-0.0.1-SNAPSHOT.jar
 
 
 
 
# ----- This is entry for EC2 Instance repo is created on EC2 Instance

# The volume inside containers needs to be mounted refer dockerrun.sh
# WS-Container-Mount has been mounted during docker run
# spring.cloud.config.server.git.uri=file:///WS-Container-Mount/AWS-Workspace/fbn-config-repo





#spring.cloud.config.server.git.uri: file://${user.home}/config-repo
#where ${user.home}/config-repo is a git repository containing YAML and properties files.

#in Windows you need an extra "/" in the file URL if it is absolute with a drive prefix, e.g. file:///${user.home}/config-repo.


#local dev env only
#spring.profiles.active=native
#spring.cloud.config.server.native.searchLocations=file:////C:///Users///admin///Desktop///AWS-Workspace///fbn-config-repo///

# Editing the search location so that toolbox can find it
#spring.cloud.config.server.native.searchLocations=file:///Desktop/AWS-Workspace/fbn-config-repo


#spring.cloud.config.server.git.uri=file:///Desktop/AWS-Workspace/fbn-config-repo/
#spring.cloud.config.server.git.uri=file:///Desktop//AWS-Workspace//fbn-config-repo//
#//spring.cloud.config.server.git.uri=file://${repo.dir}
#spring.cloud.config.server.git.uri=file:////Desktop///AWS-Workspace///fbn-config-repo///
#spring.cloud.config.server.git.uri=file://Desktop/AWS-Workspace/fbn-config-repo/
#Therefore if the config file(s) for your containerized app happened to be available on the filesystem of the base OS, then you could map that config file (or dir) into the container. Ex:
# docker run -v /home/dan/my_statsd_config.conf:/etc/statsd.conf hopsoft/graphite-statsd\u201D
#spring.cloud.config.server.git.uri=file://${repo.dir}


#spring.cloud.config.server.native.searchLocations=file:////Desktop///AWS-Workspace///fbn-config-repo///

#oing further, wouldn\u2019t it be nice if we do not need to call the /monitor endpoint at all when external configuration is changed? Spring Cloud Config provides support for this using the default git storage backend. Many git repository providers can notify you of changes in the repository through a webhook. Since the external repository is hosted on my github account, let\u2019s configure a webhook with GitHub. For this we need that our config-sevice is accessible on the internet. We use ngrok for this, which a very cool lightweight tool that creates a secure tunnel on your local machine together with a public URL. When ngrok is running, it listens on the same port your config-service is running (port 8888 in this case) and proxies external requests to your local machine. Download ngrok from here, unzip it to your Applications folder and create a symlink to it, this will allow you to run the ngrok command from any directory while in the terminal.
